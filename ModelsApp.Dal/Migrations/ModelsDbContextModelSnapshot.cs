// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelsApp.Dal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModelsApp.Dal.Migrations
{
    [DbContext(typeof(ModelsDbContext))]
    partial class ModelsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModelsApp.Dal.Entities.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Authorization", "public");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModelId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookmark", "public");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Comment", "public", t =>
                        {
                            t.HasCheckConstraint("ValidRating", "\"Rating\" BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Downloads")
                        .HasColumnType("integer");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<int>("InfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InfoId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Model", "public");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.ModelCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ModelCategory", "public");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.ModelInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CameraX")
                        .HasColumnType("double precision");

                    b.Property<double>("CameraY")
                        .HasColumnType("double precision");

                    b.Property<double>("CameraZ")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("LightHeight")
                        .HasColumnType("double precision");

                    b.Property<double>("LightIntensity")
                        .HasColumnType("double precision");

                    b.Property<double>("LightRadius")
                        .HasColumnType("double precision");

                    b.Property<double>("MemorySize")
                        .HasColumnType("double precision");

                    b.Property<string>("SceneColor")
                        .HasColumnType("text");

                    b.Property<double>("SkyIntensity")
                        .HasColumnType("double precision");

                    b.Property<int>("Triangles")
                        .HasColumnType("integer");

                    b.Property<int>("Vertices")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ModelInfo", "public");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("UserProfile", "public");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Authorization", b =>
                {
                    b.HasOne("ModelsApp.Dal.Entities.UserProfile", "UserProfile")
                        .WithOne("Authorization")
                        .HasForeignKey("ModelsApp.Dal.Entities.Authorization", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Bookmark", b =>
                {
                    b.HasOne("ModelsApp.Dal.Entities.Model", "Model")
                        .WithMany("Bookmarks")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsApp.Dal.Entities.UserProfile", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Comment", b =>
                {
                    b.HasOne("ModelsApp.Dal.Entities.Model", "Model")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsApp.Dal.Entities.UserProfile", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Model", b =>
                {
                    b.HasOne("ModelsApp.Dal.Entities.ModelCategory", "Category")
                        .WithMany("Models")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsApp.Dal.Entities.ModelInfo", "Info")
                        .WithOne("Model")
                        .HasForeignKey("ModelsApp.Dal.Entities.Model", "InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsApp.Dal.Entities.UserProfile", "Owner")
                        .WithMany("Models")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Info");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.Model", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.ModelCategory", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.ModelInfo", b =>
                {
                    b.Navigation("Model")
                        .IsRequired();
                });

            modelBuilder.Entity("ModelsApp.Dal.Entities.UserProfile", b =>
                {
                    b.Navigation("Authorization")
                        .IsRequired();

                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
